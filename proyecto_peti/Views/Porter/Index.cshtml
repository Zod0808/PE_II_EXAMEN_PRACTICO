@model proyecto_peti.Models.FuerzasPorter
@{
    ViewBag.Title = "5 Fuerzas de Porter";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <div class="card p-4 shadow-sm">
        <h2 class="text-center mb-4 text-white bg-info py-2 rounded">5 FUERZAS DE PORTER</h2>

        @* Mostrar mensajes de error si existen *@
        @if (ViewBag.ErrorMessage != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @ViewBag.ErrorMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        @* Mostrar errores de validación *@
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                @Html.ValidationSummary(false, "Por favor corrija los siguientes errores:")
            </div>
        }

        <p>
            El modelo de las <strong>5 Fuerzas de Porter</strong> analiza la competitividad del sector
            y ayuda a identificar las fuerzas que determinan la rentabilidad de la industria.
        </p>

        @using (Html.BeginForm("Index", "Porter", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.PlanId)

            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label fw-bold text-primary">
                        <i class="fas fa-user-plus"></i> Amenaza de Nuevos Entrantes
                    </label>
                    @Html.TextAreaFor(m => m.AmenazaNuevos, new
                    {
                        @class = "form-control",
                        rows = 4,
                        placeholder = "¿Qué tan fácil es para nuevas empresas entrar al mercado? Barreras de entrada, capital requerido, regulaciones...",
                        maxlength = "1000"
                    })
                    @Html.ValidationMessageFor(m => m.AmenazaNuevos, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6">
                    <label class="form-label fw-bold text-danger">
                        <i class="fas fa-chess"></i> Rivalidad entre Competidores
                    </label>
                    @Html.TextAreaFor(m => m.RivalidadCompetidores, new
                    {
                        @class = "form-control",
                        rows = 4,
                        placeholder = "¿Qué tan intensa es la competencia? Número de competidores, diferenciación de productos, guerras de precios...",
                        maxlength = "1000"
                    })
                    @Html.ValidationMessageFor(m => m.RivalidadCompetidores, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label fw-bold text-success">
                        <i class="fas fa-users"></i> Poder de Negociación de Clientes
                    </label>
                    @Html.TextAreaFor(m => m.PoderClientes, new
                    {
                        @class = "form-control",
                        rows = 4,
                        placeholder = "¿Qué influencia tienen los clientes sobre precios y condiciones? Concentración de clientes, volumen de compras...",
                        maxlength = "1000"
                    })
                    @Html.ValidationMessageFor(m => m.PoderClientes, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6">
                    <label class="form-label fw-bold text-warning">
                        <i class="fas fa-truck"></i> Poder de Negociación de Proveedores
                    </label>
                    @Html.TextAreaFor(m => m.PoderProveedores, new
                    {
                        @class = "form-control",
                        rows = 4,
                        placeholder = "¿Qué control tienen los proveedores? Número de proveedores, costos de cambio, productos únicos...",
                        maxlength = "1000"
                    })
                    @Html.ValidationMessageFor(m => m.PoderProveedores, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-12">
                    <label class="form-label fw-bold text-secondary">
                        <i class="fas fa-exchange-alt"></i> Amenaza de Productos Sustitutos
                    </label>
                    @Html.TextAreaFor(m => m.AmenazaSustitutos, new
                    {
                        @class = "form-control",
                        rows = 4,
                        placeholder = "¿Existen productos alternativos que puedan reemplazar los suyos? Disponibilidad, precios, calidad de sustitutos...",
                        maxlength = "1000"
                    })
                    @Html.ValidationMessageFor(m => m.AmenazaSustitutos, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="d-flex justify-content-between">
                <a href="@Url.Action("Index", "CadenaValor")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> 6. CADENA DE VALOR
                </a>
                <button type="submit" class="btn btn-success" id="btnGuardar">
                    <i class="fas fa-save"></i> GUARDAR
                </button>
                <a href="@Url.Action("Index", "PEST")" class="btn btn-primary">
                    8. ANÁLISIS PEST <i class="fas fa-arrow-right"></i>
                </a>
            </div>
        }
    </div>
</div>

<script>
// Prevenir doble envío del formulario
document.getElementById('btnGuardar').addEventListener('click', function(e) {
    this.disabled = true;
    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> GUARDANDO...';

    // Re-habilitar después de 5 segundos por si hay error
    setTimeout(() => {
        this.disabled = false;
        this.innerHTML = '<i class="fas fa-save"></i> GUARDAR';
    }, 5000);
});

// Auto-guardar mientras el usuario escribe (opcional)
let autoSaveTimeout;
document.querySelectorAll('textarea').forEach(textarea => {
    textarea.addEventListener('input', function() {
        clearTimeout(autoSaveTimeout);
        // Indicador visual de que hay cambios no guardados
        document.getElementById('btnGuardar').classList.add('btn-warning');
        document.getElementById('btnGuardar').classList.remove('btn-success');
    });
});
</script>
